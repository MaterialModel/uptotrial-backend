# Standard library
from enum import Enum


class Status(str, Enum):
    ACTIVE_NOT_RECRUITING = "ACTIVE_NOT_RECRUITING"
    COMPLETED = "COMPLETED"
    ENROLLING_BY_INVITATION = "ENROLLING_BY_INVITATION"
    NOT_YET_RECRUITING = "NOT_YET_RECRUITING"
    RECRUITING = "RECRUITING"
    SUSPENDED = "SUSPENDED"
    TERMINATED = "TERMINATED"
    WITHDRAWN = "WITHDRAWN"
    AVAILABLE = "AVAILABLE"
    NO_LONGER_AVAILABLE = "NO_LONGER_AVAILABLE"
    TEMPORARILY_NOT_AVAILABLE = "TEMPORARILY_NOT_AVAILABLE"
    APPROVED_FOR_MARKETING = "APPROVED_FOR_MARKETING"
    WITHHELD = "WITHHELD"
    UNKNOWN = "UNKNOWN"


class StudyType(str, Enum):
    EXPANDED_ACCESS = "EXPANDED_ACCESS"
    INTERVENTIONAL = "INTERVENTIONAL"
    OBSERVATIONAL = "OBSERVATIONAL"


class Phase(str, Enum):
    NA = "NA"
    EARLY_PHASE1 = "EARLY_PHASE1"
    PHASE1 = "PHASE1"
    PHASE2 = "PHASE2"
    PHASE3 = "PHASE3"
    PHASE4 = "PHASE4"


class Sex(str, Enum):
    FEMALE = "FEMALE"
    MALE = "MALE"
    ALL = "ALL"


class StandardAge(str, Enum):
    CHILD = "CHILD"
    ADULT = "ADULT"
    OLDER_ADULT = "OLDER_ADULT"


class SamplingMethod(str, Enum):
    PROBABILITY_SAMPLE = "PROBABILITY_SAMPLE"
    NON_PROBABILITY_SAMPLE = "NON_PROBABILITY_SAMPLE"


class IpdSharing(str, Enum):
    YES = "YES"
    NO = "NO"
    UNDECIDED = "UNDECIDED"


class IpdSharingInfoType(str, Enum):
    STUDY_PROTOCOL = "STUDY_PROTOCOL"
    SAP = "SAP"
    ICF = "ICF"
    CSR = "CSR"
    ANALYTIC_CODE = "ANALYTIC_CODE"


class OrgStudyIdType(str, Enum):
    NIH = "NIH"
    FDA = "FDA"
    VA = "VA"
    CDC = "CDC"
    AHRQ = "AHRQ"
    SAMHSA = "SAMHSA"


class SecondaryIdType(str, Enum):
    NIH = "NIH"
    FDA = "FDA"
    VA = "VA"
    CDC = "CDC"
    AHRQ = "AHRQ"
    SAMHSA = "SAMHSA"
    OTHER_GRANT = "OTHER_GRANT"
    EUDRACT_NUMBER = "EUDRACT_NUMBER"
    CTIS = "CTIS"
    REGISTRY = "REGISTRY"
    OTHER = "OTHER"


class AgencyClass(str, Enum):
    NIH = "NIH"
    FED = "FED"
    OTHER_GOV = "OTHER_GOV"
    INDIV = "INDIV"
    INDUSTRY = "INDUSTRY"
    NETWORK = "NETWORK"
    AMBIG = "AMBIG"
    OTHER = "OTHER"
    UNKNOWN = "UNKNOWN"


class ExpandedAccessStatus(str, Enum):
    AVAILABLE = "AVAILABLE"
    NO_LONGER_AVAILABLE = "NO_LONGER_AVAILABLE"
    TEMPORARILY_NOT_AVAILABLE = "TEMPORARILY_NOT_AVAILABLE"
    APPROVED_FOR_MARKETING = "APPROVED_FOR_MARKETING"


class DateType(str, Enum):
    ACTUAL = "ACTUAL"
    ESTIMATED = "ESTIMATED"


class ResponsiblePartyType(str, Enum):
    SPONSOR = "SPONSOR"
    PRINCIPAL_INVESTIGATOR = "PRINCIPAL_INVESTIGATOR"
    SPONSOR_INVESTIGATOR = "SPONSOR_INVESTIGATOR"


class DesignAllocation(str, Enum):
    RANDOMIZED = "RANDOMIZED"
    NON_RANDOMIZED = "NON_RANDOMIZED"
    NA = "NA"


class InterventionalAssignment(str, Enum):
    SINGLE_GROUP = "SINGLE_GROUP"
    PARALLEL = "PARALLEL"
    CROSSOVER = "CROSSOVER"
    FACTORIAL = "FACTORIAL"
    SEQUENTIAL = "SEQUENTIAL"


class PrimaryPurpose(str, Enum):
    TREATMENT = "TREATMENT"
    PREVENTION = "PREVENTION"
    DIAGNOSTIC = "DIAGNOSTIC"
    ECT = "ECT" # Note: Spec lists 'ECT', assuming typo for 'ETC' or specific domain term
    SUPPORTIVE_CARE = "SUPPORTIVE_CARE"
    SCREENING = "SCREENING"
    HEALTH_SERVICES_RESEARCH = "HEALTH_SERVICES_RESEARCH"
    BASIC_SCIENCE = "BASIC_SCIENCE"
    DEVICE_FEASIBILITY = "DEVICE_FEASIBILITY"
    OTHER = "OTHER"


class ObservationalModel(str, Enum):
    COHORT = "COHORT"
    CASE_CONTROL = "CASE_CONTROL"
    CASE_ONLY = "CASE_ONLY"
    CASE_CROSSOVER = "CASE_CROSSOVER"
    ECOLOGIC_OR_COMMUNITY = "ECOLOGIC_OR_COMMUNITY"
    FAMILY_BASED = "FAMILY_BASED"
    DEFINED_POPULATION = "DEFINED_POPULATION"
    NATURAL_HISTORY = "NATURAL_HISTORY"
    OTHER = "OTHER"


class DesignTimePerspective(str, Enum):
    RETROSPECTIVE = "RETROSPECTIVE"
    PROSPECTIVE = "PROSPECTIVE"
    CROSS_SECTIONAL = "CROSS_SECTIONAL"
    OTHER = "OTHER"


class BioSpecRetention(str, Enum):
    NONE_RETAINED = "NONE_RETAINED"
    SAMPLES_WITH_DNA = "SAMPLES_WITH_DNA"
    SAMPLES_WITHOUT_DNA = "SAMPLES_WITHOUT_DNA"


class EnrollmentType(str, Enum):
    ACTUAL = "ACTUAL"
    ESTIMATED = "ESTIMATED"


class ArmGroupType(str, Enum):
    EXPERIMENTAL = "EXPERIMENTAL"
    ACTIVE_COMPARATOR = "ACTIVE_COMPARATOR"
    PLACEBO_COMPARATOR = "PLACEBO_COMPARATOR"
    SHAM_COMPARATOR = "SHAM_COMPARATOR"
    NO_INTERVENTION = "NO_INTERVENTION"
    OTHER = "OTHER"


class InterventionType(str, Enum):
    BEHAVIORAL = "BEHAVIORAL"
    BIOLOGICAL = "BIOLOGICAL"
    COMBINATION_PRODUCT = "COMBINATION_PRODUCT"
    DEVICE = "DEVICE"
    DIAGNOSTIC_TEST = "DIAGNOSTIC_TEST"
    DIETARY_SUPPLEMENT = "DIETARY_SUPPLEMENT"
    DRUG = "DRUG"
    GENETIC = "GENETIC"
    PROCEDURE = "PROCEDURE"
    RADIATION = "RADIATION"
    OTHER = "OTHER"


class ContactRole(str, Enum):
    STUDY_CHAIR = "STUDY_CHAIR"
    STUDY_DIRECTOR = "STUDY_DIRECTOR"
    PRINCIPAL_INVESTIGATOR = "PRINCIPAL_INVESTIGATOR"
    SUB_INVESTIGATOR = "SUB_INVESTIGATOR"
    CONTACT = "CONTACT"


class OfficialRole(str, Enum):
    STUDY_CHAIR = "STUDY_CHAIR"
    STUDY_DIRECTOR = "STUDY_DIRECTOR"
    PRINCIPAL_INVESTIGATOR = "PRINCIPAL_INVESTIGATOR"
    SUB_INVESTIGATOR = "SUB_INVESTIGATOR"


class RecruitmentStatus(str, Enum):
    ACTIVE_NOT_RECRUITING = "ACTIVE_NOT_RECRUITING"
    COMPLETED = "COMPLETED"
    ENROLLING_BY_INVITATION = "ENROLLING_BY_INVITATION"
    NOT_YET_RECRUITING = "NOT_YET_RECRUITING"
    RECRUITING = "RECRUITING"
    SUSPENDED = "SUSPENDED"
    TERMINATED = "TERMINATED"
    WITHDRAWN = "WITHDRAWN"
    AVAILABLE = "AVAILABLE" # Added based on Location Status enum


class ReferenceType(str, Enum):
    BACKGROUND = "BACKGROUND"
    RESULT = "RESULT"
    DERIVED = "DERIVED"


class MeasureParam(str, Enum):
    GEOMETRIC_MEAN = "GEOMETRIC_MEAN"
    GEOMETRIC_LEAST_SQUARES_MEAN = "GEOMETRIC_LEAST_SQUARES_MEAN"
    LEAST_SQUARES_MEAN = "LEAST_SQUARES_MEAN"
    LOG_MEAN = "LOG_MEAN"
    MEAN = "MEAN"
    MEDIAN = "MEDIAN"
    NUMBER = "NUMBER"
    COUNT_OF_PARTICIPANTS = "COUNT_OF_PARTICIPANTS"
    COUNT_OF_UNITS = "COUNT_OF_UNITS"


class MeasureDispersionType(str, Enum):
    NA = "NA"
    STANDARD_DEVIATION = "STANDARD_DEVIATION"
    STANDARD_ERROR = "STANDARD_ERROR"
    INTER_QUARTILE_RANGE = "INTER_QUARTILE_RANGE"
    FULL_RANGE = "FULL_RANGE"
    CONFIDENCE_80 = "CONFIDENCE_80"
    CONFIDENCE_90 = "CONFIDENCE_90"
    CONFIDENCE_95 = "CONFIDENCE_95"
    CONFIDENCE_975 = "CONFIDENCE_975"
    CONFIDENCE_99 = "CONFIDENCE_99"
    CONFIDENCE_OTHER = "CONFIDENCE_OTHER"
    GEOMETRIC_COEFFICIENT = "GEOMETRIC_COEFFICIENT"


class OutcomeMeasureType(str, Enum):
    PRIMARY = "PRIMARY"
    SECONDARY = "SECONDARY"
    OTHER_PRE_SPECIFIED = "OTHER_PRE_SPECIFIED"
    POST_HOC = "POST_HOC"


class ReportingStatus(str, Enum):
    NOT_POSTED = "NOT_POSTED"
    POSTED = "POSTED"


class EventAssessment(str, Enum):
    NON_SYSTEMATIC_ASSESSMENT = "NON_SYSTEMATIC_ASSESSMENT"
    SYSTEMATIC_ASSESSMENT = "SYSTEMATIC_ASSESSMENT"


class AgreementRestrictionType(str, Enum):
    LTE60 = "LTE60"
    GT60 = "GT60"
    OTHER = "OTHER"


class BrowseLeafRelevance(str, Enum):
    LOW = "LOW"
    HIGH = "HIGH"


class DesignMasking(str, Enum):
    NONE = "NONE"
    SINGLE = "SINGLE"
    DOUBLE = "DOUBLE"
    TRIPLE = "TRIPLE"
    QUADRUPLE = "QUADRUPLE"


class WhoMasked(str, Enum):
    PARTICIPANT = "PARTICIPANT"
    CARE_PROVIDER = "CARE_PROVIDER"
    INVESTIGATOR = "INVESTIGATOR"
    OUTCOMES_ASSESSOR = "OUTCOMES_ASSESSOR"


class AnalysisDispersionType(str, Enum):
    STANDARD_DEVIATION = "STANDARD_DEVIATION"
    STANDARD_ERROR_OF_MEAN = "STANDARD_ERROR_OF_MEAN"


class ConfidenceIntervalNumSides(str, Enum):
    ONE_SIDED = "ONE_SIDED"
    TWO_SIDED = "TWO_SIDED"


class NonInferiorityType(str, Enum):
    SUPERIORITY = "SUPERIORITY"
    NON_INFERIORITY = "NON_INFERIORITY"
    EQUIVALENCE = "EQUIVALENCE"
    OTHER = "OTHER"
    NON_INFERIORITY_OR_EQUIVALENCE = "NON_INFERIORITY_OR_EQUIVALENCE"
    SUPERIORITY_OR_OTHER = "SUPERIORITY_OR_OTHER"
    NON_INFERIORITY_OR_EQUIVALENCE_LEGACY = "NON_INFERIORITY_OR_EQUIVALENCE_LEGACY"
    SUPERIORITY_OR_OTHER_LEGACY = "SUPERIORITY_OR_OTHER_LEGACY"


class UnpostedEventType(str, Enum):
    RESET = "RESET"
    RELEASE = "RELEASE"
    UNRELEASE = "UNRELEASE"


class ViolationEventType(str, Enum):
    VIOLATION_IDENTIFIED = "VIOLATION_IDENTIFIED"
    CORRECTION_CONFIRMED = "CORRECTION_CONFIRMED"
    PENALTY_IMPOSED = "PENALTY_IMPOSED"
    ISSUES_IN_LETTER_ADDRESSED_CONFIRMED = "ISSUES_IN_LETTER_ADDRESSED_CONFIRMED" 